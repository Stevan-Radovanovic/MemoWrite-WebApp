Let/Const
1. let has a block scope, not available outside of the curly braces
2. const variables can't be changed, unless they are reference types (arrays, objects)
3. hoisting does not work with let/const variables

Arrow functions
1. if the func has only one line of code, and it's a return, the return word can be omitted
2. this doesn't changes it's context depending on from where it is called

Default Parameters
1. Default values for parameters are available, with the = sign

Object literals
1. You are allowed to not provide the values for properties, if they are defined before the object
2. dynamic name adding is available with []
    let field = "fieldName"
    let obj  = {
        [field]: 25
    }

Operators
1. Rest operator (...parameter) - puts all the parameters into an array
2. Spread operator (...array) = spreads the elements from an array into individual variables

For-of loop
1. Works like the foreach loop

Template literals
1. Example `${var1} is very ${var2}`

Destructuring 
1. Arays - You can select multiple elements of an array
let [a,b] = array
2. Destructuring can be used for switching values between variables
let [a,b] = [b,a]
3. Objects - Same logic, just with curly braces
4. With :, you can change the name od some destructured variable
let [a,b:c] = obj - b is now referenced as c outside of the object

Modules
1. KeyWords import and export
2. Import statements without extensions
3. Exports can be listed in the end {}
4. We are not importing values, but references
5. Default is imported by removing curly braces
6. Aliases - with as KeyWord
7. To import everything - import * as something from "file"

Classes 
1. Inheritance with the word extends
2. The class that is extending must have a super call in it's constructor
3. static keyword makes a function static
4. Private properties with an underscore (just a convention)
5. Getter get name() {}
6. Setter set name() {}

Symbols
1. Unique values, not iterable
2. Symbol.for("something") enables multiple same symbols

Iterators
1. Used with Symbol.Iterator
2. Used to override an array's iterator
3. Used for making an object iterable

Generators
1. * before the function name, returns an iterator

Promises
1. every promise has a function with a resolve and reject parameter
2. then has two functions, first for resolve, second for reject
3. All errors can be caught with a catch block
4. Better way to write - async/await
5. Promise.All - wait for all Promises
6. Promise.Race - wait for the first promise

Arrays
1. created with new Array() or []
2. to create with length new Array(5)
3. to create with elements new Array.of(1,2,3)
4. Array.for() to create a new array from an existing one, with the second argument being used to fondle with the elements

Maps
1. A collection of key-value pairs
2. .size for the size
3. .set for adding, .get for finding
4. everything works by key
5. keys+values=entries
6. WeakMap - Objects as keys, looping not possible

Sets
1. Arrays with no duplicates
2. .add i .has
3. WeakSet - Stores only objects

Reflect API
1. Reflect.construct(class,array of arguments,override of Prototype)
2. Reflect.apply(method,what does the this reffer to)
3. Reflect.getPrototypeOf(object) / Reflect.setPrototypeOf(object, newProto)
4. Reflect.get(object,'nameOfProperty')
5. Reflect.get(object,'nameOfProperty')